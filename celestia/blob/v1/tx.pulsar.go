// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package blobv1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_MsgPayForBlobs_2_list)(nil)

type _MsgPayForBlobs_2_list struct {
	list *[][]byte
}

func (x *_MsgPayForBlobs_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgPayForBlobs_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_MsgPayForBlobs_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_MsgPayForBlobs_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgPayForBlobs_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message MsgPayForBlobs at list field Namespaces as it is not of Message kind"))
}

func (x *_MsgPayForBlobs_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_MsgPayForBlobs_2_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_MsgPayForBlobs_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_MsgPayForBlobs_3_list)(nil)

type _MsgPayForBlobs_3_list struct {
	list *[]uint32
}

func (x *_MsgPayForBlobs_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgPayForBlobs_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint32((*x.list)[i])
}

func (x *_MsgPayForBlobs_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := (uint32)(valueUnwrapped)
	(*x.list)[i] = concreteValue
}

func (x *_MsgPayForBlobs_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := (uint32)(valueUnwrapped)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgPayForBlobs_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message MsgPayForBlobs at list field BlobSizes as it is not of Message kind"))
}

func (x *_MsgPayForBlobs_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_MsgPayForBlobs_3_list) NewElement() protoreflect.Value {
	v := uint32(0)
	return protoreflect.ValueOfUint32(v)
}

func (x *_MsgPayForBlobs_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_MsgPayForBlobs_4_list)(nil)

type _MsgPayForBlobs_4_list struct {
	list *[][]byte
}

func (x *_MsgPayForBlobs_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgPayForBlobs_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_MsgPayForBlobs_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_MsgPayForBlobs_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgPayForBlobs_4_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message MsgPayForBlobs at list field ShareCommitments as it is not of Message kind"))
}

func (x *_MsgPayForBlobs_4_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_MsgPayForBlobs_4_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_MsgPayForBlobs_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_MsgPayForBlobs_8_list)(nil)

type _MsgPayForBlobs_8_list struct {
	list *[]uint32
}

func (x *_MsgPayForBlobs_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgPayForBlobs_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint32((*x.list)[i])
}

func (x *_MsgPayForBlobs_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := (uint32)(valueUnwrapped)
	(*x.list)[i] = concreteValue
}

func (x *_MsgPayForBlobs_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := (uint32)(valueUnwrapped)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgPayForBlobs_8_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message MsgPayForBlobs at list field ShareVersions as it is not of Message kind"))
}

func (x *_MsgPayForBlobs_8_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_MsgPayForBlobs_8_list) NewElement() protoreflect.Value {
	v := uint32(0)
	return protoreflect.ValueOfUint32(v)
}

func (x *_MsgPayForBlobs_8_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MsgPayForBlobs                   protoreflect.MessageDescriptor
	fd_MsgPayForBlobs_signer            protoreflect.FieldDescriptor
	fd_MsgPayForBlobs_namespaces        protoreflect.FieldDescriptor
	fd_MsgPayForBlobs_blob_sizes        protoreflect.FieldDescriptor
	fd_MsgPayForBlobs_share_commitments protoreflect.FieldDescriptor
	fd_MsgPayForBlobs_share_versions    protoreflect.FieldDescriptor
)

func init() {
	file_celestia_blob_v1_tx_proto_init()
	md_MsgPayForBlobs = File_celestia_blob_v1_tx_proto.Messages().ByName("MsgPayForBlobs")
	fd_MsgPayForBlobs_signer = md_MsgPayForBlobs.Fields().ByName("signer")
	fd_MsgPayForBlobs_namespaces = md_MsgPayForBlobs.Fields().ByName("namespaces")
	fd_MsgPayForBlobs_blob_sizes = md_MsgPayForBlobs.Fields().ByName("blob_sizes")
	fd_MsgPayForBlobs_share_commitments = md_MsgPayForBlobs.Fields().ByName("share_commitments")
	fd_MsgPayForBlobs_share_versions = md_MsgPayForBlobs.Fields().ByName("share_versions")
}

var _ protoreflect.Message = (*fastReflection_MsgPayForBlobs)(nil)

type fastReflection_MsgPayForBlobs MsgPayForBlobs

func (x *MsgPayForBlobs) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgPayForBlobs)(x)
}

func (x *MsgPayForBlobs) slowProtoReflect() protoreflect.Message {
	mi := &file_celestia_blob_v1_tx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgPayForBlobs_messageType fastReflection_MsgPayForBlobs_messageType
var _ protoreflect.MessageType = fastReflection_MsgPayForBlobs_messageType{}

type fastReflection_MsgPayForBlobs_messageType struct{}

func (x fastReflection_MsgPayForBlobs_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgPayForBlobs)(nil)
}
func (x fastReflection_MsgPayForBlobs_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgPayForBlobs)
}
func (x fastReflection_MsgPayForBlobs_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgPayForBlobs
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgPayForBlobs) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgPayForBlobs
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgPayForBlobs) Type() protoreflect.MessageType {
	return _fastReflection_MsgPayForBlobs_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgPayForBlobs) New() protoreflect.Message {
	return new(fastReflection_MsgPayForBlobs)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgPayForBlobs) Interface() protoreflect.ProtoMessage {
	return (*MsgPayForBlobs)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgPayForBlobs) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Signer != "" {
		value := protoreflect.ValueOfString(x.Signer)
		if !f(fd_MsgPayForBlobs_signer, value) {
			return
		}
	}
	if len(x.Namespaces) != 0 {
		value := protoreflect.ValueOfList(&_MsgPayForBlobs_2_list{list: &x.Namespaces})
		if !f(fd_MsgPayForBlobs_namespaces, value) {
			return
		}
	}
	if len(x.BlobSizes) != 0 {
		value := protoreflect.ValueOfList(&_MsgPayForBlobs_3_list{list: &x.BlobSizes})
		if !f(fd_MsgPayForBlobs_blob_sizes, value) {
			return
		}
	}
	if len(x.ShareCommitments) != 0 {
		value := protoreflect.ValueOfList(&_MsgPayForBlobs_4_list{list: &x.ShareCommitments})
		if !f(fd_MsgPayForBlobs_share_commitments, value) {
			return
		}
	}
	if len(x.ShareVersions) != 0 {
		value := protoreflect.ValueOfList(&_MsgPayForBlobs_8_list{list: &x.ShareVersions})
		if !f(fd_MsgPayForBlobs_share_versions, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgPayForBlobs) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "celestia.blob.v1.MsgPayForBlobs.signer":
		return x.Signer != ""
	case "celestia.blob.v1.MsgPayForBlobs.namespaces":
		return len(x.Namespaces) != 0
	case "celestia.blob.v1.MsgPayForBlobs.blob_sizes":
		return len(x.BlobSizes) != 0
	case "celestia.blob.v1.MsgPayForBlobs.share_commitments":
		return len(x.ShareCommitments) != 0
	case "celestia.blob.v1.MsgPayForBlobs.share_versions":
		return len(x.ShareVersions) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: celestia.blob.v1.MsgPayForBlobs"))
		}
		panic(fmt.Errorf("message celestia.blob.v1.MsgPayForBlobs does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgPayForBlobs) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "celestia.blob.v1.MsgPayForBlobs.signer":
		x.Signer = ""
	case "celestia.blob.v1.MsgPayForBlobs.namespaces":
		x.Namespaces = nil
	case "celestia.blob.v1.MsgPayForBlobs.blob_sizes":
		x.BlobSizes = nil
	case "celestia.blob.v1.MsgPayForBlobs.share_commitments":
		x.ShareCommitments = nil
	case "celestia.blob.v1.MsgPayForBlobs.share_versions":
		x.ShareVersions = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: celestia.blob.v1.MsgPayForBlobs"))
		}
		panic(fmt.Errorf("message celestia.blob.v1.MsgPayForBlobs does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgPayForBlobs) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "celestia.blob.v1.MsgPayForBlobs.signer":
		value := x.Signer
		return protoreflect.ValueOfString(value)
	case "celestia.blob.v1.MsgPayForBlobs.namespaces":
		if len(x.Namespaces) == 0 {
			return protoreflect.ValueOfList(&_MsgPayForBlobs_2_list{})
		}
		listValue := &_MsgPayForBlobs_2_list{list: &x.Namespaces}
		return protoreflect.ValueOfList(listValue)
	case "celestia.blob.v1.MsgPayForBlobs.blob_sizes":
		if len(x.BlobSizes) == 0 {
			return protoreflect.ValueOfList(&_MsgPayForBlobs_3_list{})
		}
		listValue := &_MsgPayForBlobs_3_list{list: &x.BlobSizes}
		return protoreflect.ValueOfList(listValue)
	case "celestia.blob.v1.MsgPayForBlobs.share_commitments":
		if len(x.ShareCommitments) == 0 {
			return protoreflect.ValueOfList(&_MsgPayForBlobs_4_list{})
		}
		listValue := &_MsgPayForBlobs_4_list{list: &x.ShareCommitments}
		return protoreflect.ValueOfList(listValue)
	case "celestia.blob.v1.MsgPayForBlobs.share_versions":
		if len(x.ShareVersions) == 0 {
			return protoreflect.ValueOfList(&_MsgPayForBlobs_8_list{})
		}
		listValue := &_MsgPayForBlobs_8_list{list: &x.ShareVersions}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: celestia.blob.v1.MsgPayForBlobs"))
		}
		panic(fmt.Errorf("message celestia.blob.v1.MsgPayForBlobs does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgPayForBlobs) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "celestia.blob.v1.MsgPayForBlobs.signer":
		x.Signer = value.Interface().(string)
	case "celestia.blob.v1.MsgPayForBlobs.namespaces":
		lv := value.List()
		clv := lv.(*_MsgPayForBlobs_2_list)
		x.Namespaces = *clv.list
	case "celestia.blob.v1.MsgPayForBlobs.blob_sizes":
		lv := value.List()
		clv := lv.(*_MsgPayForBlobs_3_list)
		x.BlobSizes = *clv.list
	case "celestia.blob.v1.MsgPayForBlobs.share_commitments":
		lv := value.List()
		clv := lv.(*_MsgPayForBlobs_4_list)
		x.ShareCommitments = *clv.list
	case "celestia.blob.v1.MsgPayForBlobs.share_versions":
		lv := value.List()
		clv := lv.(*_MsgPayForBlobs_8_list)
		x.ShareVersions = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: celestia.blob.v1.MsgPayForBlobs"))
		}
		panic(fmt.Errorf("message celestia.blob.v1.MsgPayForBlobs does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgPayForBlobs) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "celestia.blob.v1.MsgPayForBlobs.namespaces":
		if x.Namespaces == nil {
			x.Namespaces = [][]byte{}
		}
		value := &_MsgPayForBlobs_2_list{list: &x.Namespaces}
		return protoreflect.ValueOfList(value)
	case "celestia.blob.v1.MsgPayForBlobs.blob_sizes":
		if x.BlobSizes == nil {
			x.BlobSizes = []uint32{}
		}
		value := &_MsgPayForBlobs_3_list{list: &x.BlobSizes}
		return protoreflect.ValueOfList(value)
	case "celestia.blob.v1.MsgPayForBlobs.share_commitments":
		if x.ShareCommitments == nil {
			x.ShareCommitments = [][]byte{}
		}
		value := &_MsgPayForBlobs_4_list{list: &x.ShareCommitments}
		return protoreflect.ValueOfList(value)
	case "celestia.blob.v1.MsgPayForBlobs.share_versions":
		if x.ShareVersions == nil {
			x.ShareVersions = []uint32{}
		}
		value := &_MsgPayForBlobs_8_list{list: &x.ShareVersions}
		return protoreflect.ValueOfList(value)
	case "celestia.blob.v1.MsgPayForBlobs.signer":
		panic(fmt.Errorf("field signer of message celestia.blob.v1.MsgPayForBlobs is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: celestia.blob.v1.MsgPayForBlobs"))
		}
		panic(fmt.Errorf("message celestia.blob.v1.MsgPayForBlobs does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgPayForBlobs) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "celestia.blob.v1.MsgPayForBlobs.signer":
		return protoreflect.ValueOfString("")
	case "celestia.blob.v1.MsgPayForBlobs.namespaces":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_MsgPayForBlobs_2_list{list: &list})
	case "celestia.blob.v1.MsgPayForBlobs.blob_sizes":
		list := []uint32{}
		return protoreflect.ValueOfList(&_MsgPayForBlobs_3_list{list: &list})
	case "celestia.blob.v1.MsgPayForBlobs.share_commitments":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_MsgPayForBlobs_4_list{list: &list})
	case "celestia.blob.v1.MsgPayForBlobs.share_versions":
		list := []uint32{}
		return protoreflect.ValueOfList(&_MsgPayForBlobs_8_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: celestia.blob.v1.MsgPayForBlobs"))
		}
		panic(fmt.Errorf("message celestia.blob.v1.MsgPayForBlobs does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgPayForBlobs) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in celestia.blob.v1.MsgPayForBlobs", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgPayForBlobs) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgPayForBlobs) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgPayForBlobs) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgPayForBlobs) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgPayForBlobs)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Signer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Namespaces) > 0 {
			for _, b := range x.Namespaces {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.BlobSizes) > 0 {
			l = 0
			for _, e := range x.BlobSizes {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if len(x.ShareCommitments) > 0 {
			for _, b := range x.ShareCommitments {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ShareVersions) > 0 {
			l = 0
			for _, e := range x.ShareVersions {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgPayForBlobs)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ShareVersions) > 0 {
			var pksize2 int
			for _, num := range x.ShareVersions {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.ShareVersions {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x42
		}
		if len(x.ShareCommitments) > 0 {
			for iNdEx := len(x.ShareCommitments) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.ShareCommitments[iNdEx])
				copy(dAtA[i:], x.ShareCommitments[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ShareCommitments[iNdEx])))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.BlobSizes) > 0 {
			var pksize4 int
			for _, num := range x.BlobSizes {
				pksize4 += runtime.Sov(uint64(num))
			}
			i -= pksize4
			j3 := i
			for _, num := range x.BlobSizes {
				for num >= 1<<7 {
					dAtA[j3] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j3++
				}
				dAtA[j3] = uint8(num)
				j3++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize4))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Namespaces) > 0 {
			for iNdEx := len(x.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Namespaces[iNdEx])
				copy(dAtA[i:], x.Namespaces[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Namespaces[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.Signer) > 0 {
			i -= len(x.Signer)
			copy(dAtA[i:], x.Signer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Signer)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgPayForBlobs)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgPayForBlobs: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgPayForBlobs: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Namespaces = append(x.Namespaces, make([]byte, postIndex-iNdEx))
				copy(x.Namespaces[len(x.Namespaces)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType == 0 {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.BlobSizes = append(x.BlobSizes, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.BlobSizes) == 0 {
						x.BlobSizes = make([]uint32, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint32
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint32(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.BlobSizes = append(x.BlobSizes, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlobSizes", wireType)
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ShareCommitments", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ShareCommitments = append(x.ShareCommitments, make([]byte, postIndex-iNdEx))
				copy(x.ShareCommitments[len(x.ShareCommitments)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType == 0 {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.ShareVersions = append(x.ShareVersions, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.ShareVersions) == 0 {
						x.ShareVersions = make([]uint32, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint32
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint32(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.ShareVersions = append(x.ShareVersions, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ShareVersions", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgPayForBlobsResponse protoreflect.MessageDescriptor
)

func init() {
	file_celestia_blob_v1_tx_proto_init()
	md_MsgPayForBlobsResponse = File_celestia_blob_v1_tx_proto.Messages().ByName("MsgPayForBlobsResponse")
}

var _ protoreflect.Message = (*fastReflection_MsgPayForBlobsResponse)(nil)

type fastReflection_MsgPayForBlobsResponse MsgPayForBlobsResponse

func (x *MsgPayForBlobsResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgPayForBlobsResponse)(x)
}

func (x *MsgPayForBlobsResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_celestia_blob_v1_tx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgPayForBlobsResponse_messageType fastReflection_MsgPayForBlobsResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgPayForBlobsResponse_messageType{}

type fastReflection_MsgPayForBlobsResponse_messageType struct{}

func (x fastReflection_MsgPayForBlobsResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgPayForBlobsResponse)(nil)
}
func (x fastReflection_MsgPayForBlobsResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgPayForBlobsResponse)
}
func (x fastReflection_MsgPayForBlobsResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgPayForBlobsResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgPayForBlobsResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgPayForBlobsResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgPayForBlobsResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgPayForBlobsResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgPayForBlobsResponse) New() protoreflect.Message {
	return new(fastReflection_MsgPayForBlobsResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgPayForBlobsResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgPayForBlobsResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgPayForBlobsResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgPayForBlobsResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: celestia.blob.v1.MsgPayForBlobsResponse"))
		}
		panic(fmt.Errorf("message celestia.blob.v1.MsgPayForBlobsResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgPayForBlobsResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: celestia.blob.v1.MsgPayForBlobsResponse"))
		}
		panic(fmt.Errorf("message celestia.blob.v1.MsgPayForBlobsResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgPayForBlobsResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: celestia.blob.v1.MsgPayForBlobsResponse"))
		}
		panic(fmt.Errorf("message celestia.blob.v1.MsgPayForBlobsResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgPayForBlobsResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: celestia.blob.v1.MsgPayForBlobsResponse"))
		}
		panic(fmt.Errorf("message celestia.blob.v1.MsgPayForBlobsResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgPayForBlobsResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: celestia.blob.v1.MsgPayForBlobsResponse"))
		}
		panic(fmt.Errorf("message celestia.blob.v1.MsgPayForBlobsResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgPayForBlobsResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: celestia.blob.v1.MsgPayForBlobsResponse"))
		}
		panic(fmt.Errorf("message celestia.blob.v1.MsgPayForBlobsResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgPayForBlobsResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in celestia.blob.v1.MsgPayForBlobsResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgPayForBlobsResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgPayForBlobsResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgPayForBlobsResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgPayForBlobsResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgPayForBlobsResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgPayForBlobsResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgPayForBlobsResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgPayForBlobsResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgPayForBlobsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: celestia/blob/v1/tx.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MsgPayForBlobs pays for the inclusion of a blob in the block.
type MsgPayForBlobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// signer is the bech32 encoded signer address. See
	// https://en.bitcoin.it/wiki/Bech32.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// namespaces is a list of namespaces that the blobs are associated with. A
	// namespace is a byte slice of length 29 where the first byte is the
	// namespaceVersion and the subsequent 28 bytes are the namespaceId.
	Namespaces [][]byte `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// blob_sizes is a list of blob sizes (one per blob). Each size is in bytes.
	BlobSizes []uint32 `protobuf:"varint,3,rep,packed,name=blob_sizes,json=blobSizes,proto3" json:"blob_sizes,omitempty"`
	// share_commitments is a list of share commitments (one per blob).
	ShareCommitments [][]byte `protobuf:"bytes,4,rep,name=share_commitments,json=shareCommitments,proto3" json:"share_commitments,omitempty"`
	// share_versions are the versions of the share format that the blobs
	// associated with this message should use when included in a block. The
	// share_versions specified must match the share_versions used to generate the
	// share_commitment in this message.
	ShareVersions []uint32 `protobuf:"varint,8,rep,packed,name=share_versions,json=shareVersions,proto3" json:"share_versions,omitempty"`
}

func (x *MsgPayForBlobs) Reset() {
	*x = MsgPayForBlobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_celestia_blob_v1_tx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPayForBlobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPayForBlobs) ProtoMessage() {}

// Deprecated: Use MsgPayForBlobs.ProtoReflect.Descriptor instead.
func (*MsgPayForBlobs) Descriptor() ([]byte, []int) {
	return file_celestia_blob_v1_tx_proto_rawDescGZIP(), []int{0}
}

func (x *MsgPayForBlobs) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

func (x *MsgPayForBlobs) GetNamespaces() [][]byte {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *MsgPayForBlobs) GetBlobSizes() []uint32 {
	if x != nil {
		return x.BlobSizes
	}
	return nil
}

func (x *MsgPayForBlobs) GetShareCommitments() [][]byte {
	if x != nil {
		return x.ShareCommitments
	}
	return nil
}

func (x *MsgPayForBlobs) GetShareVersions() []uint32 {
	if x != nil {
		return x.ShareVersions
	}
	return nil
}

// MsgPayForBlobsResponse describes the response returned after the submission
// of a PayForBlobs
type MsgPayForBlobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgPayForBlobsResponse) Reset() {
	*x = MsgPayForBlobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_celestia_blob_v1_tx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPayForBlobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPayForBlobsResponse) ProtoMessage() {}

// Deprecated: Use MsgPayForBlobsResponse.ProtoReflect.Descriptor instead.
func (*MsgPayForBlobsResponse) Descriptor() ([]byte, []int) {
	return file_celestia_blob_v1_tx_proto_rawDescGZIP(), []int{1}
}

var File_celestia_blob_v1_tx_proto protoreflect.FileDescriptor

var file_celestia_blob_v1_tx_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x65, 0x6c, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x65, 0x6c,
	0x65, 0x73, 0x74, 0x69, 0x61, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x01, 0x0a, 0x0e,
	0x4d, 0x73, 0x67, 0x50, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x62,
	0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x4d, 0x73, 0x67,
	0x50, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0xb8, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x65, 0x6c, 0x65,
	0x73, 0x74, 0x69, 0x61, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x07, 0x54, 0x78,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2f, 0x74,
	0x69, 0x61, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x63, 0x65, 0x6c, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2f,
	0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x6c, 0x6f, 0x62, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x43, 0x42, 0x58, 0xaa, 0x02, 0x10, 0x43, 0x65, 0x6c, 0x65, 0x73, 0x74, 0x69, 0x61, 0x2e,
	0x42, 0x6c, 0x6f, 0x62, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x43, 0x65, 0x6c, 0x65, 0x73, 0x74,
	0x69, 0x61, 0x5c, 0x42, 0x6c, 0x6f, 0x62, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x43, 0x65, 0x6c,
	0x65, 0x73, 0x74, 0x69, 0x61, 0x5c, 0x42, 0x6c, 0x6f, 0x62, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x43, 0x65, 0x6c, 0x65,
	0x73, 0x74, 0x69, 0x61, 0x3a, 0x3a, 0x42, 0x6c, 0x6f, 0x62, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_celestia_blob_v1_tx_proto_rawDescOnce sync.Once
	file_celestia_blob_v1_tx_proto_rawDescData = file_celestia_blob_v1_tx_proto_rawDesc
)

func file_celestia_blob_v1_tx_proto_rawDescGZIP() []byte {
	file_celestia_blob_v1_tx_proto_rawDescOnce.Do(func() {
		file_celestia_blob_v1_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_celestia_blob_v1_tx_proto_rawDescData)
	})
	return file_celestia_blob_v1_tx_proto_rawDescData
}

var file_celestia_blob_v1_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_celestia_blob_v1_tx_proto_goTypes = []interface{}{
	(*MsgPayForBlobs)(nil),         // 0: celestia.blob.v1.MsgPayForBlobs
	(*MsgPayForBlobsResponse)(nil), // 1: celestia.blob.v1.MsgPayForBlobsResponse
}
var file_celestia_blob_v1_tx_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_celestia_blob_v1_tx_proto_init() }
func file_celestia_blob_v1_tx_proto_init() {
	if File_celestia_blob_v1_tx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_celestia_blob_v1_tx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPayForBlobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_celestia_blob_v1_tx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPayForBlobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_celestia_blob_v1_tx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_celestia_blob_v1_tx_proto_goTypes,
		DependencyIndexes: file_celestia_blob_v1_tx_proto_depIdxs,
		MessageInfos:      file_celestia_blob_v1_tx_proto_msgTypes,
	}.Build()
	File_celestia_blob_v1_tx_proto = out.File
	file_celestia_blob_v1_tx_proto_rawDesc = nil
	file_celestia_blob_v1_tx_proto_goTypes = nil
	file_celestia_blob_v1_tx_proto_depIdxs = nil
}
