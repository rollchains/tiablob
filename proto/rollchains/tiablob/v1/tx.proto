syntax = "proto3";
package rollchains.tiablob.v1;

import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";
import "rollchains/tiablob/lightclients/celestia/v1/celestia.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/rollchains/tiablob";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // SetCelestiaAddress allows a validator to configure their Celestia address for feegranting
  rpc SetCelestiaAddress(MsgSetCelestiaAddress) returns (MsgSetCelestiaAddressResponse);
  rpc InjectedData(MsgInjectedData) returns (MsgInjectedDataResponse);
}

// MsgSetCelestiaAddress defines a SDK message for validators to set their Celestia address
message MsgSetCelestiaAddress {
    option (cosmos.msg.v1.signer) = "validator_address";
    option (amino.name) = "tiablob/MsgSetCelestiaAddress";
  
    option (gogoproto.equal) = false;
    option (gogoproto.goproto_getters) = false;

    string validator_address = 1
        [ (cosmos_proto.scalar) = "cosmos.ValidatorAddressString" ];
  
    string celestia_address = 2
        [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  }
  
  // MsgSetCelestiaAddressResponse is the response type for the Msg/SetCelestiaAddress RPC method.
  message MsgSetCelestiaAddressResponse {}
  
  message MsgInjectedData {
    option (cosmos.msg.v1.signer) = "signer";
    option (amino.name) = "tiablob/MsgInjectedData";
  
    option (gogoproto.equal) = false;
    option (gogoproto.goproto_getters) = false;

    .rollchains.tiablob.lightclients.celestia.v1.CreateClient create_client = 1;
    repeated rollchains.tiablob.lightclients.celestia.v1.Header headers = 2;
    repeated rollchains.tiablob.lightclients.celestia.v1.BlobProof proofs = 3;
    PendingBlocks pending_blocks = 4 [ (gogoproto.nullable) = false ];
    bytes proposer_address = 5;
    google.protobuf.Timestamp block_time = 6 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
    string signer = 7  [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

}

message MsgInjectedDataResponse {}

message PendingBlocks {
    repeated int64 block_heights = 1;
}

message InjectTx {
    repeated google.protobuf.Any messages = 1;
}