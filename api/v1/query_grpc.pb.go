// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: rollchains/tiablob/v1/query.proto

package tiablobv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Validators_FullMethodName      = "/rollchains.tiablob.v1.Query/Validators"
	Query_CelestiaAddress_FullMethodName = "/rollchains.tiablob.v1.Query/CelestiaAddress"
	Query_ProvenHeight_FullMethodName    = "/rollchains.tiablob.v1.Query/ProvenHeight"
	Query_PendingBlocks_FullMethodName   = "/rollchains.tiablob.v1.Query/PendingBlocks"
	Query_ExpiredBlocks_FullMethodName   = "/rollchains.tiablob.v1.Query/ExpiredBlocks"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Validators returns registered validators of the module.
	Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error)
	CelestiaAddress(ctx context.Context, in *QueryCelestiaAddressRequest, opts ...grpc.CallOption) (*QueryCelestiaAddressResponse, error)
	ProvenHeight(ctx context.Context, in *QueryProvenHeightRequest, opts ...grpc.CallOption) (*QueryProvenHeightResponse, error)
	PendingBlocks(ctx context.Context, in *QueryPendingBlocksRequest, opts ...grpc.CallOption) (*QueryPendingBlocksResponse, error)
	ExpiredBlocks(ctx context.Context, in *QueryExpiredBlocksRequest, opts ...grpc.CallOption) (*QueryExpiredBlocksResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error) {
	out := new(QueryValidatorsResponse)
	err := c.cc.Invoke(ctx, Query_Validators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CelestiaAddress(ctx context.Context, in *QueryCelestiaAddressRequest, opts ...grpc.CallOption) (*QueryCelestiaAddressResponse, error) {
	out := new(QueryCelestiaAddressResponse)
	err := c.cc.Invoke(ctx, Query_CelestiaAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProvenHeight(ctx context.Context, in *QueryProvenHeightRequest, opts ...grpc.CallOption) (*QueryProvenHeightResponse, error) {
	out := new(QueryProvenHeightResponse)
	err := c.cc.Invoke(ctx, Query_ProvenHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingBlocks(ctx context.Context, in *QueryPendingBlocksRequest, opts ...grpc.CallOption) (*QueryPendingBlocksResponse, error) {
	out := new(QueryPendingBlocksResponse)
	err := c.cc.Invoke(ctx, Query_PendingBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredBlocks(ctx context.Context, in *QueryExpiredBlocksRequest, opts ...grpc.CallOption) (*QueryExpiredBlocksResponse, error) {
	out := new(QueryExpiredBlocksResponse)
	err := c.cc.Invoke(ctx, Query_ExpiredBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Validators returns registered validators of the module.
	Validators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error)
	CelestiaAddress(context.Context, *QueryCelestiaAddressRequest) (*QueryCelestiaAddressResponse, error)
	ProvenHeight(context.Context, *QueryProvenHeightRequest) (*QueryProvenHeightResponse, error)
	PendingBlocks(context.Context, *QueryPendingBlocksRequest) (*QueryPendingBlocksResponse, error)
	ExpiredBlocks(context.Context, *QueryExpiredBlocksRequest) (*QueryExpiredBlocksResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Validators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validators not implemented")
}
func (UnimplementedQueryServer) CelestiaAddress(context.Context, *QueryCelestiaAddressRequest) (*QueryCelestiaAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CelestiaAddress not implemented")
}
func (UnimplementedQueryServer) ProvenHeight(context.Context, *QueryProvenHeightRequest) (*QueryProvenHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvenHeight not implemented")
}
func (UnimplementedQueryServer) PendingBlocks(context.Context, *QueryPendingBlocksRequest) (*QueryPendingBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingBlocks not implemented")
}
func (UnimplementedQueryServer) ExpiredBlocks(context.Context, *QueryExpiredBlocksRequest) (*QueryExpiredBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredBlocks not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Validators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Validators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validators(ctx, req.(*QueryValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CelestiaAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCelestiaAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CelestiaAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CelestiaAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CelestiaAddress(ctx, req.(*QueryCelestiaAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProvenHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProvenHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProvenHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ProvenHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProvenHeight(ctx, req.(*QueryProvenHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PendingBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingBlocks(ctx, req.(*QueryPendingBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExpiredBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ExpiredBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredBlocks(ctx, req.(*QueryExpiredBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rollchains.tiablob.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validators",
			Handler:    _Query_Validators_Handler,
		},
		{
			MethodName: "CelestiaAddress",
			Handler:    _Query_CelestiaAddress_Handler,
		},
		{
			MethodName: "ProvenHeight",
			Handler:    _Query_ProvenHeight_Handler,
		},
		{
			MethodName: "PendingBlocks",
			Handler:    _Query_PendingBlocks_Handler,
		},
		{
			MethodName: "ExpiredBlocks",
			Handler:    _Query_ExpiredBlocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rollchains/tiablob/v1/query.proto",
}
