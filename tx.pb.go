// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rollchains/tiablob/v1/tx.proto

package tiablob

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	celestia "github.com/rollchains/tiablob/lightclients/celestia"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSetCelestiaAddress defines a SDK message for validators to set their Celestia address
type MsgSetCelestiaAddress struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	CelestiaAddress  string `protobuf:"bytes,2,opt,name=celestia_address,json=celestiaAddress,proto3" json:"celestia_address,omitempty"`
}

func (m *MsgSetCelestiaAddress) Reset()         { *m = MsgSetCelestiaAddress{} }
func (m *MsgSetCelestiaAddress) String() string { return proto.CompactTextString(m) }
func (*MsgSetCelestiaAddress) ProtoMessage()    {}
func (*MsgSetCelestiaAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dc8a0b0fc54b3b1, []int{0}
}
func (m *MsgSetCelestiaAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetCelestiaAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetCelestiaAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetCelestiaAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetCelestiaAddress.Merge(m, src)
}
func (m *MsgSetCelestiaAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetCelestiaAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetCelestiaAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetCelestiaAddress proto.InternalMessageInfo

// MsgSetCelestiaAddressResponse is the response type for the Msg/SetCelestiaAddress RPC method.
type MsgSetCelestiaAddressResponse struct {
}

func (m *MsgSetCelestiaAddressResponse) Reset()         { *m = MsgSetCelestiaAddressResponse{} }
func (m *MsgSetCelestiaAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetCelestiaAddressResponse) ProtoMessage()    {}
func (*MsgSetCelestiaAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dc8a0b0fc54b3b1, []int{1}
}
func (m *MsgSetCelestiaAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetCelestiaAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetCelestiaAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetCelestiaAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetCelestiaAddressResponse.Merge(m, src)
}
func (m *MsgSetCelestiaAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetCelestiaAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetCelestiaAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetCelestiaAddressResponse proto.InternalMessageInfo

type MsgInjectedData struct {
	CreateClient    *celestia.CreateClient `protobuf:"bytes,1,opt,name=create_client,json=createClient,proto3" json:"create_client,omitempty"`
	Headers         []*celestia.Header     `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	Proofs          []*celestia.BlobProof  `protobuf:"bytes,3,rep,name=proofs,proto3" json:"proofs,omitempty"`
	PendingBlocks   PendingBlocks          `protobuf:"bytes,4,opt,name=pending_blocks,json=pendingBlocks,proto3" json:"pending_blocks"`
	ProposerAddress []byte                 `protobuf:"bytes,5,opt,name=proposer_address,json=proposerAddress,proto3" json:"proposer_address,omitempty"`
	BlockTime       time.Time              `protobuf:"bytes,6,opt,name=block_time,json=blockTime,proto3,stdtime" json:"block_time"`
	Signer          string                 `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgInjectedData) Reset()         { *m = MsgInjectedData{} }
func (m *MsgInjectedData) String() string { return proto.CompactTextString(m) }
func (*MsgInjectedData) ProtoMessage()    {}
func (*MsgInjectedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dc8a0b0fc54b3b1, []int{2}
}
func (m *MsgInjectedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInjectedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInjectedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInjectedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInjectedData.Merge(m, src)
}
func (m *MsgInjectedData) XXX_Size() int {
	return m.Size()
}
func (m *MsgInjectedData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInjectedData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInjectedData proto.InternalMessageInfo

type MsgInjectedDataResponse struct {
}

func (m *MsgInjectedDataResponse) Reset()         { *m = MsgInjectedDataResponse{} }
func (m *MsgInjectedDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInjectedDataResponse) ProtoMessage()    {}
func (*MsgInjectedDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dc8a0b0fc54b3b1, []int{3}
}
func (m *MsgInjectedDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInjectedDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInjectedDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInjectedDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInjectedDataResponse.Merge(m, src)
}
func (m *MsgInjectedDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInjectedDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInjectedDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInjectedDataResponse proto.InternalMessageInfo

type PendingBlocks struct {
	BlockHeights []int64 `protobuf:"varint,1,rep,packed,name=block_heights,json=blockHeights,proto3" json:"block_heights,omitempty"`
}

func (m *PendingBlocks) Reset()         { *m = PendingBlocks{} }
func (m *PendingBlocks) String() string { return proto.CompactTextString(m) }
func (*PendingBlocks) ProtoMessage()    {}
func (*PendingBlocks) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dc8a0b0fc54b3b1, []int{4}
}
func (m *PendingBlocks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingBlocks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingBlocks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingBlocks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingBlocks.Merge(m, src)
}
func (m *PendingBlocks) XXX_Size() int {
	return m.Size()
}
func (m *PendingBlocks) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingBlocks.DiscardUnknown(m)
}

var xxx_messageInfo_PendingBlocks proto.InternalMessageInfo

func (m *PendingBlocks) GetBlockHeights() []int64 {
	if m != nil {
		return m.BlockHeights
	}
	return nil
}

type InjectTx struct {
	Messages []*types.Any `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *InjectTx) Reset()         { *m = InjectTx{} }
func (m *InjectTx) String() string { return proto.CompactTextString(m) }
func (*InjectTx) ProtoMessage()    {}
func (*InjectTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dc8a0b0fc54b3b1, []int{5}
}
func (m *InjectTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InjectTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InjectTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InjectTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InjectTx.Merge(m, src)
}
func (m *InjectTx) XXX_Size() int {
	return m.Size()
}
func (m *InjectTx) XXX_DiscardUnknown() {
	xxx_messageInfo_InjectTx.DiscardUnknown(m)
}

var xxx_messageInfo_InjectTx proto.InternalMessageInfo

func (m *InjectTx) GetMessages() []*types.Any {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgSetCelestiaAddress)(nil), "rollchains.tiablob.v1.MsgSetCelestiaAddress")
	proto.RegisterType((*MsgSetCelestiaAddressResponse)(nil), "rollchains.tiablob.v1.MsgSetCelestiaAddressResponse")
	proto.RegisterType((*MsgInjectedData)(nil), "rollchains.tiablob.v1.MsgInjectedData")
	proto.RegisterType((*MsgInjectedDataResponse)(nil), "rollchains.tiablob.v1.MsgInjectedDataResponse")
	proto.RegisterType((*PendingBlocks)(nil), "rollchains.tiablob.v1.PendingBlocks")
	proto.RegisterType((*InjectTx)(nil), "rollchains.tiablob.v1.InjectTx")
}

func init() { proto.RegisterFile("rollchains/tiablob/v1/tx.proto", fileDescriptor_8dc8a0b0fc54b3b1) }

var fileDescriptor_8dc8a0b0fc54b3b1 = []byte{
	// 709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x41, 0x4f, 0x13, 0x41,
	0x14, 0xee, 0x5a, 0x28, 0x30, 0xb4, 0x02, 0x13, 0x08, 0xa5, 0x49, 0x5b, 0xac, 0xc6, 0x54, 0x22,
	0xbb, 0x50, 0x88, 0x46, 0xe2, 0x41, 0x5a, 0x0f, 0x78, 0x28, 0xc1, 0x85, 0x78, 0xf0, 0x60, 0x33,
	0xbb, 0x1d, 0xa6, 0xab, 0xbb, 0x3b, 0x9b, 0x9d, 0xa1, 0x81, 0x9b, 0xf1, 0x64, 0x3c, 0xf1, 0x13,
	0xf8, 0x09, 0x1c, 0x88, 0xbf, 0x81, 0x23, 0xe1, 0xe4, 0x49, 0x0d, 0x1c, 0xf0, 0xc4, 0x6f, 0x30,
	0x3b, 0x3b, 0x5b, 0xb6, 0xb0, 0x44, 0xb9, 0x34, 0x3b, 0xdf, 0xfb, 0xde, 0xf7, 0xde, 0xbc, 0xf9,
	0x5e, 0x41, 0xc9, 0xa7, 0xb6, 0x6d, 0x76, 0x90, 0xe5, 0x32, 0x8d, 0x5b, 0xc8, 0xb0, 0xa9, 0xa1,
	0x75, 0x17, 0x35, 0xbe, 0xab, 0x7a, 0x3e, 0xe5, 0x14, 0x4e, 0x5d, 0xc5, 0x55, 0x19, 0x57, 0xbb,
	0x8b, 0x85, 0x19, 0x93, 0x32, 0x87, 0xb2, 0x96, 0x20, 0x69, 0xe1, 0x21, 0xcc, 0x28, 0xcc, 0x10,
	0x4a, 0x89, 0x8d, 0x35, 0x71, 0x32, 0x76, 0xb6, 0x35, 0xe4, 0xee, 0xc9, 0xd0, 0x24, 0xa1, 0x84,
	0x86, 0x29, 0xc1, 0x97, 0x44, 0xa7, 0xc3, 0x74, 0xcd, 0x61, 0x24, 0x28, 0xed, 0x30, 0x22, 0x03,
	0x13, 0xc8, 0xb1, 0x5c, 0xaa, 0x89, 0x5f, 0x09, 0xad, 0x24, 0xb4, 0x6b, 0x5b, 0xa4, 0xc3, 0x4d,
	0xdb, 0xc2, 0x2e, 0x67, 0x9a, 0x89, 0x6d, 0xcc, 0xb8, 0x85, 0x02, 0xa5, 0xe8, 0x5b, 0xe6, 0x96,
	0xaf, 0x37, 0xc6, 0x2d, 0x07, 0x33, 0x8e, 0x1c, 0x2f, 0x24, 0x54, 0x2e, 0x15, 0x30, 0xd5, 0x64,
	0x64, 0x13, 0xf3, 0x86, 0xcc, 0x5c, 0x6d, 0xb7, 0x7d, 0xcc, 0x18, 0x5c, 0x07, 0x13, 0x5d, 0x64,
	0x5b, 0x6d, 0xc4, 0xa9, 0xdf, 0x42, 0x21, 0x98, 0x57, 0x66, 0x95, 0xea, 0x48, 0xfd, 0xc1, 0xe9,
	0xd1, 0x7c, 0x51, 0x0e, 0xe0, 0x5d, 0xc4, 0x91, 0x79, 0x9b, 0xdc, 0xb7, 0x5c, 0xa2, 0x8f, 0x77,
	0xaf, 0xe1, 0xb0, 0x01, 0xc6, 0xa3, 0xe6, 0x7a, 0x72, 0xf7, 0x84, 0x5c, 0xfe, 0xf4, 0x68, 0x7e,
	0x52, 0xca, 0xf5, 0xab, 0x8c, 0x99, 0xfd, 0x4d, 0xad, 0xbc, 0xfa, 0x7a, 0x50, 0x4e, 0xfd, 0x39,
	0x28, 0xa7, 0xbe, 0x5c, 0x1c, 0xce, 0xdd, 0xec, 0xef, 0xdb, 0xc5, 0xe1, 0x5c, 0x31, 0x9a, 0x51,
	0xe2, 0xb5, 0x2a, 0x65, 0x50, 0x4c, 0x0c, 0xe8, 0x98, 0x79, 0xd4, 0x65, 0xb8, 0xf2, 0x7d, 0x00,
	0x8c, 0x35, 0x19, 0x79, 0xe3, 0x7e, 0xc4, 0x26, 0xc7, 0xed, 0xd7, 0x88, 0x23, 0xf8, 0x01, 0xe4,
	0x4c, 0x1f, 0x23, 0x8e, 0x5b, 0xe1, 0xcc, 0xc5, 0x1c, 0x46, 0x6b, 0x2f, 0xd4, 0x04, 0xa7, 0xc4,
	0x9f, 0x46, 0xed, 0x3d, 0x47, 0x77, 0x51, 0x6d, 0x08, 0x85, 0x86, 0x88, 0xe8, 0x59, 0x33, 0x76,
	0x82, 0x4d, 0x30, 0xd4, 0xc1, 0xa8, 0x8d, 0xfd, 0x60, 0x24, 0xe9, 0xea, 0x68, 0x6d, 0xe9, 0x4e,
	0xca, 0x6b, 0x22, 0x57, 0x8f, 0x34, 0xe0, 0x3a, 0xc8, 0x78, 0x3e, 0xa5, 0xdb, 0x2c, 0x9f, 0x16,
	0x6a, 0xcf, 0xee, 0xa4, 0x56, 0xb7, 0xa9, 0xb1, 0x11, 0xa4, 0xeb, 0x52, 0x05, 0xbe, 0x05, 0xf7,
	0x3d, 0xec, 0xb6, 0x2d, 0x97, 0xb4, 0x0c, 0x9b, 0x9a, 0x9f, 0x58, 0x7e, 0x40, 0xdc, 0xff, 0x91,
	0x9a, 0xb8, 0x29, 0xea, 0x46, 0x48, 0xae, 0x0b, 0x6e, 0x7d, 0xe0, 0xf8, 0x67, 0x39, 0xa5, 0xe7,
	0xbc, 0x38, 0x08, 0x9f, 0x80, 0x71, 0xcf, 0xa7, 0x1e, 0x65, 0xf8, 0xca, 0x5c, 0x83, 0xb3, 0x4a,
	0x35, 0xab, 0x8f, 0x45, 0xf8, 0x95, 0x71, 0x80, 0xa8, 0xda, 0x0a, 0xbc, 0x9b, 0xcf, 0x88, 0xca,
	0x05, 0x35, 0x34, 0xb6, 0x1a, 0x19, 0x5b, 0xdd, 0x8a, 0x8c, 0x5d, 0x1f, 0x0e, 0xea, 0xed, 0xff,
	0x2a, 0x2b, 0xfa, 0x88, 0xc8, 0x0b, 0x22, 0x70, 0x01, 0x64, 0x98, 0x45, 0x5c, 0xec, 0xe7, 0x87,
	0xfe, 0xe1, 0x39, 0xc9, 0x5b, 0xd1, 0xe2, 0x56, 0x93, 0x60, 0xe0, 0xaf, 0xe9, 0x98, 0xbf, 0xe2,
	0x26, 0xa9, 0xcc, 0x80, 0xe9, 0x6b, 0x50, 0xcf, 0x53, 0xcb, 0x20, 0xd7, 0x37, 0x13, 0xf8, 0x10,
	0xe4, 0xc2, 0x3b, 0x75, 0x70, 0xf0, 0x0c, 0xc1, 0x62, 0xa5, 0xab, 0x69, 0x3d, 0x2b, 0xc0, 0xb5,
	0x10, 0xab, 0xbc, 0x04, 0xc3, 0xa1, 0xda, 0xd6, 0x2e, 0x5c, 0x00, 0xc3, 0x0e, 0x66, 0x0c, 0x11,
	0x1c, 0x72, 0x47, 0x6b, 0x93, 0x37, 0x46, 0xb0, 0xea, 0xee, 0xe9, 0x3d, 0x56, 0xed, 0x52, 0x01,
	0xe9, 0x26, 0x23, 0x70, 0x17, 0xc0, 0x84, 0xed, 0x7e, 0x7a, 0xcb, 0xd3, 0x25, 0xee, 0x46, 0x61,
	0xf9, 0x2e, 0xec, 0xe8, 0xd6, 0x70, 0x1b, 0x64, 0xfb, 0xb6, 0xe8, 0xf1, 0xed, 0x2a, 0x71, 0x5e,
	0x41, 0xfd, 0x3f, 0x5e, 0x54, 0xa7, 0x30, 0xf8, 0xf9, 0xe2, 0x70, 0x4e, 0xa9, 0x3f, 0x3f, 0x3e,
	0x2b, 0x29, 0x27, 0x67, 0x25, 0xe5, 0xf7, 0x59, 0x49, 0xd9, 0x3f, 0x2f, 0xa5, 0x4e, 0xce, 0x4b,
	0xa9, 0x1f, 0xe7, 0xa5, 0xd4, 0xfb, 0x22, 0xb1, 0x78, 0x67, 0xc7, 0x50, 0x4d, 0xea, 0x68, 0x37,
	0xff, 0x4c, 0x8d, 0x8c, 0x98, 0xe0, 0xd2, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x4a, 0x49,
	0x42, 0x18, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SetCelestiaAddress allows a validator to configure their Celestia address for feegranting
	SetCelestiaAddress(ctx context.Context, in *MsgSetCelestiaAddress, opts ...grpc.CallOption) (*MsgSetCelestiaAddressResponse, error)
	InjectedData(ctx context.Context, in *MsgInjectedData, opts ...grpc.CallOption) (*MsgInjectedDataResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetCelestiaAddress(ctx context.Context, in *MsgSetCelestiaAddress, opts ...grpc.CallOption) (*MsgSetCelestiaAddressResponse, error) {
	out := new(MsgSetCelestiaAddressResponse)
	err := c.cc.Invoke(ctx, "/rollchains.tiablob.v1.Msg/SetCelestiaAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InjectedData(ctx context.Context, in *MsgInjectedData, opts ...grpc.CallOption) (*MsgInjectedDataResponse, error) {
	out := new(MsgInjectedDataResponse)
	err := c.cc.Invoke(ctx, "/rollchains.tiablob.v1.Msg/InjectedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SetCelestiaAddress allows a validator to configure their Celestia address for feegranting
	SetCelestiaAddress(context.Context, *MsgSetCelestiaAddress) (*MsgSetCelestiaAddressResponse, error)
	InjectedData(context.Context, *MsgInjectedData) (*MsgInjectedDataResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetCelestiaAddress(ctx context.Context, req *MsgSetCelestiaAddress) (*MsgSetCelestiaAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCelestiaAddress not implemented")
}
func (*UnimplementedMsgServer) InjectedData(ctx context.Context, req *MsgInjectedData) (*MsgInjectedDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InjectedData not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetCelestiaAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetCelestiaAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetCelestiaAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollchains.tiablob.v1.Msg/SetCelestiaAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetCelestiaAddress(ctx, req.(*MsgSetCelestiaAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InjectedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInjectedData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InjectedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollchains.tiablob.v1.Msg/InjectedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InjectedData(ctx, req.(*MsgInjectedData))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rollchains.tiablob.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetCelestiaAddress",
			Handler:    _Msg_SetCelestiaAddress_Handler,
		},
		{
			MethodName: "InjectedData",
			Handler:    _Msg_InjectedData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rollchains/tiablob/v1/tx.proto",
}

func (m *MsgSetCelestiaAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetCelestiaAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetCelestiaAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CelestiaAddress) > 0 {
		i -= len(m.CelestiaAddress)
		copy(dAtA[i:], m.CelestiaAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CelestiaAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetCelestiaAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetCelestiaAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetCelestiaAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInjectedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInjectedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInjectedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x3a
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.BlockTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.BlockTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if len(m.ProposerAddress) > 0 {
		i -= len(m.ProposerAddress)
		copy(dAtA[i:], m.ProposerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProposerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.PendingBlocks.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Proofs) > 0 {
		for iNdEx := len(m.Proofs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proofs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CreateClient != nil {
		{
			size, err := m.CreateClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInjectedDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInjectedDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInjectedDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PendingBlocks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingBlocks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingBlocks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHeights) > 0 {
		dAtA5 := make([]byte, len(m.BlockHeights)*10)
		var j4 int
		for _, num1 := range m.BlockHeights {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintTx(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InjectTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InjectTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InjectTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetCelestiaAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CelestiaAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetCelestiaAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInjectedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateClient != nil {
		l = m.CreateClient.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Proofs) > 0 {
		for _, e := range m.Proofs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.PendingBlocks.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.ProposerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.BlockTime)
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInjectedDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PendingBlocks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockHeights) > 0 {
		l = 0
		for _, e := range m.BlockHeights {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *InjectTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetCelestiaAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetCelestiaAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetCelestiaAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CelestiaAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CelestiaAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetCelestiaAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetCelestiaAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetCelestiaAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInjectedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInjectedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInjectedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateClient == nil {
				m.CreateClient = &celestia.CreateClient{}
			}
			if err := m.CreateClient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &celestia.Header{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proofs = append(m.Proofs, &celestia.BlobProof{})
			if err := m.Proofs[len(m.Proofs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingBlocks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposerAddress = append(m.ProposerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposerAddress == nil {
				m.ProposerAddress = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInjectedDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInjectedDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInjectedDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingBlocks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingBlocks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingBlocks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlockHeights = append(m.BlockHeights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BlockHeights) == 0 {
					m.BlockHeights = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BlockHeights = append(m.BlockHeights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InjectTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InjectTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InjectTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &types.Any{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
